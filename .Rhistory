install.packages("swirl")
library(swirl)
swirl()
12
info()
play()
nxt()
5 + 7
x gets 5 plus 7
x <- 5 +7
x
x-3
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c
c()
c
info()
?c
z
z
z <- c(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3 , 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 1000)
(z * 2 + 1000)
z * 2 + 1000
my_div
getwd
getwd()
ls()
x <-9
ls()
dir()
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
2
3
3
3
3
3
3
4
4
44
4
1
1
1
info()
1
2
3
4
5
1
2
3
3
3
4
44
55
5
6
77
1
1
1
1
1
1
1
info
info()
1
11/12
'deck'
deck
52
4/52
0
3/13
2/51
1
1
1
1
1
2
3
4
1
.64
.64
1
1
1
mypdf
1
integrate(mypdf,0,1.6)
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
dq
expect_dice(dice_low)
3.5
1
1
1
1
1
1
integrate(myfunc,0,2)
spop
1
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
1
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
1
1
1
1
11
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1
1
1
1
1
1
1/sqrt(12*n)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
1
1
1
1
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1
1
1
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
ctt <- read.csv("c://zone_closed.csv")
ctt.T <- t(ctt)
colnames(ctt.T) <- ctt[,1]
ctt.T <- ctt.T[1, ]
ctt <- read.csv("c://zone_closed.csv")
ctt.T <- t(ctt)
colnames(ctt.T) <- ctt[,1]
ctt.T <- ctt.T[2:nrow(ctt.T), ]
View(ctt.T)
ctt.T
View(ctt.T)
View(ctt.T)
cormat <- cor(ctt.T)
cormat <- cor(ctt.T[1:20])
cormat <- cor(ctt.T[2:20])
cormat <- cor(ctt.T[2])
cormat <- cor(ctt.T)
names(ctt.T)
ctt.T <- as.data.frame(ctt.T)
View(ctt.T)
ctt.T$A15961
cor(ctt.T)
cor(ctt.T[2:3])
cor(ctt.T[1:3])
cor(ctt.T[4:5])
View(ctt.T)
corrplot(ctt.T, method = "pie",tl.cex = 0.9)
corrplot(ctt.T, method = "pie",tl.cex = 0.9)
library(corrplot)
corrplot(ctt.T, method = "pie",tl.cex = 0.9)
corrplot(ctt.T[2:3], method = "pie",tl.cex = 0.9)
corrplot(ctt.T[2:5], method = "pie",tl.cex = 0.9)
ctt <- read.csv("c://zone_closed.csv")
ctt.T <- t(ctt)
colnames(ctt.T) <- ctt[,1]
ctt.T <- ctt.T[2:nrow(ctt.T), ]
ctt.T <- as.data.frame(ctt.T)
View(ctt.T)
ctt.T$A17263
ctt <- read.csv("c://zone_res")
ctt.T <- t(ctt)
colnames(ctt.T) <- ctt[,1]
ctt.T <- ctt.T[2:nrow(ctt.T), ]
ctt.T <- as.data.frame(ctt.T)
ctt <- read.csv("c://zone_res.csv")
ctt.T <- t(ctt)
colnames(ctt.T) <- ctt[,1]
ctt.T <- ctt.T[2:nrow(ctt.T), ]
ctt.T <- as.data.frame(ctt.T)
View(ctt.T)
ctt.T$`3rd Party_D/S cable restored`
View(ctt.T)
plot(ctt.T)
plot(ctt.T[2:3])
plot(ctt.T[2:20])
plot(ctt.T[2:30])
plot(ctt.T[2:21])
plot(ctt.T[2:10])
write.csv(ctt.T,"c://qq.csv")
d <- dist(ctt.T, method = "euclidean")
d
fit <- hclust(d, method="ward")
plot(fit)
groups <- cutree(fit, k=5)
rect.hclust(fit, k=5, border="red")
# Ward Hierarchical Clustering
d <- dist(ctt.T, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=5, border="red")
rect.hclust(fit, k=10, border="red")
setwd("~/")
setwd("C:/Users/R10154/Google Drive/PHD/Progress/phdprogress1")
View(ctt)
install.packages(rImpala)
install.packages(RImpala)
install.packages(rImpala)
install.packages("RImpala")
library(RImpala)
c <- rimpala.connect()
rimpala.connect(IP = "10.54.1.150")
rimpala.connect(IP = "10.54.1.151",port = 21050)
rimpala.connect(IP = "10.54.1.151",port = 21050,principal = "noSSL")
rimpala.connect(IP = "10.54.1.151",port = "21050,principal = "noSSL")
rimpala.connect(IP = "10.54.1.151",port = "21050",principal = "noSSL")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
a<- rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
a<- rimpala.connect(IP="10.54.1.152",port="21050",principal="noSasl")
a<- rimpala.connect(IP="10.54.1.150",port="21050",principal="noSasl")
a<- rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
a<- rimpala.connect(IP="10.54.1.151",port="21050", principal="noSasl")
rimpala.init()
library(RImpala)
rimpala.init()
