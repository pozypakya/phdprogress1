install.packages("swirl")
library(swirl)
swirl()
12
info()
play()
nxt()
5 + 7
x gets 5 plus 7
x <- 5 +7
x
x-3
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c
c()
c
info()
?c
z
z
z <- c(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3 , 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 1000)
(z * 2 + 1000)
z * 2 + 1000
my_div
getwd
getwd()
ls()
x <-9
ls()
dir()
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
2
3
3
3
3
3
3
4
4
44
4
1
1
1
info()
1
2
3
4
5
1
2
3
3
3
4
44
55
5
6
77
1
1
1
1
1
1
1
info
info()
1
11/12
'deck'
deck
52
4/52
0
3/13
2/51
1
1
1
1
1
2
3
4
1
.64
.64
1
1
1
mypdf
1
integrate(mypdf,0,1.6)
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
dq
expect_dice(dice_low)
3.5
1
1
1
1
1
1
integrate(myfunc,0,2)
spop
1
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
1
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
1
1
1
1
11
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1
1
1
1
1
1
1/sqrt(12*n)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
1
1
1
1
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1
1
1
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
json_data
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
jj
jj$business_id
jj$name
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
jj <- unlist(json_data)
jj
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
json_data
jj <- as.data.frame(json_data)
flatten<-function(x) {
dumnames<-unlist(getnames(x,T))
dumnames<-gsub("(*.)\\.1","\\1",dumnames)
repeat {
x <- do.call(.Primitive("c"), x)
if(!any(vapply(x, is.list, logical(1)))){
names(x)<-dumnames
return(x)
}
}
}
getnames<-function(x,recursive){
nametree <- function(x, parent_name, depth) {
if (length(x) == 0)
return(character(0))
x_names <- names(x)
if (is.null(x_names)){
x_names <- seq_along(x)
x_names <- paste(parent_name, x_names, sep = "")
}else{
x_names[x_names==""] <- seq_along(x)[x_names==""]
x_names <- paste(parent_name, x_names, sep = "")
}
if (!is.list(x) || (!recursive && depth >= 1L))
return(x_names)
x_names <- paste(x_names, ".", sep = "")
lapply(seq_len(length(x)), function(i) nametree(x[[i]],
x_names[i], depth + 1L))
}
nametree(x, "", 0L)
}
out<-flatten(json_data)
library(reshape2)
out<-melt(json_data)
View(out)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = FALSE)
View(out)
View(jj)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
jj <- as.data.frame(json_data)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
names(json_data)
jj <- as.data.frame(View(head(json_data)))
View(jj)
jj <- as.data.frame(View(head(json_data)))
as.data.frame(t(sapply( txtJson$result$data, unlist )) )
as.data.frame(t(sapply(json_data, unlist )) )
c <- as.data.frame(t(sapply(json_data, unlist )) )
View(c)
install.packages("RHive")
install.packages("ROdbc)
)
)
)
)
sdwd
install.packages("ROdbc")
install.packages("RODBC")
library("RODBC")
library(RODBC)
conn < - odbcConnect(dsn="ACCPAC 54 SQL", uid="my_ID", pwd="my_PWD")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM TableName")
odbcClose(conn)
dim(queryResult)
library(RODBC)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn <- odbcConnect(dsn="yelt", uid="", pwd="")
library(RODBC)
conn <- odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
library(RODBC)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
sqlQuery(conn, "SELECT * FROM coursera.business")
library(readxl)
a <- read_excel("c:/business.xls")
View(a)
library(jsonlite)
a$attributes
library(RJSONIO)
fromJSON(a$attributes)
g <- fromJSON(a$attributes)
a$attributes
jj <- unlist(a$attributes)
jj
g <- fromJSON(a$attributes)
g <- fromJSON(is.na(a$attributes))
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes)
library(rjson)
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes,C)
g <- fromJSON(a$attributes)
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='attributes')
fmNames<-sapply(a$attributes, function(x) x[[14]])
fmNames<-sapply(a$attributes, function(x) x[[]])
fmNames<-sapply(a$attributes, function(x) x[[1]])
fmNames
View(fmNames)
fmNames<-sapply(a$attributes, function(x) x[[2]])
fmNames<-sapply(a$attributes, function(x) x[{1}])
fmNames
fmNames<-sapply(a$hours, function(x) x[{1}])
fmnames
fmNames
json_data <- fromJSON(paste(readLines(a$hours), collapse=""))
json_data <- fromJSON(paste(a$hours, collapse=""))
library(RJSONIO)
json_data <- fromJSON(a$hours, flatten = TRUE)
library("rjson")
json_data <- fromJSON(a$hours, flatten = TRUE)
json_data <- fromJSON(a$hours)
a$hours
raw_data      <- gsub('\\"', '', a$hours)
raw_data
raw_data      <- gsub('\\"{', '', a$hours)
raw_data <- gsub("\\]\\]", "\\]", a$hours)
raw_data
raw_data <- paste0(raw_data, "}")
raw_data
raw_data
View(raw_data)
Head(raw_data)
head(raw_data)
View(head(raw_data))
library(rjson)
dat <- fromJSON(a$hours)
dat <- fromJSON(a$attributes)
dat <- fromJSON(a$attributes,C)
dat <- fromJSON(a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
a$business_id
a$attributes
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
raw_data <- paste0(raw_data, "}")
raw_data
library(jsonlite)
rbind.pages(fromJSON(a$attributes))
rbind.pages(fromJSON(a$hours))
rbind.pages(fromJSON(a$hours))
setwd("C:/Users/R10154/Google Drive/PHD/Progress/phdprogress1")
setwd("C:/Users/R10154/Google Drive/PHD/Progress/phdprogress1")
install.packages("RODBC")
require(devtools)
require(devtools)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
remove.packages("rJava")
require(devtools)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
library(RImpala)
rimpala.init()
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.init()
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
res = rimpala.query("Select * from nova_trouble_ticket limit 10")
library("RJavaTools")
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
rimpala.query("Select * from nova.nova_trouble_ticket limit 10")
install.packages("rImpala")
install.packages("RImpala")
install.packages("RImpala")
library(RImpala)
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova.nova_trouble_ticket limit 10")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova.nova_trouble_ticket limit 10")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova.nova_trouble_ticket limit 10")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova.nova_trouble_ticket limit 10")
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("rJava", version = "0.5.0", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("rJava", version = "0.5.1", repos = "http://cran.us.r-project.org")
install_version("rJava", version = "0.5-1", repos = "http://cran.us.r-project.org")
install_version("rJava", version = "0.6.0", repos = "http://cran.us.r-project.org")
install_version("rJava", version = "0.6-0", repos = "http://cran.us.r-project.org")
install_version("rJava",  repos = "http://cran.us.r-project.org")
install.packages(package, repos = repos, contriburl = contriburl,
install_version("rJava",  repos = "http://cran.us.r-project.org")
)
install_version("rJava",  repos = "http://cran.us.r-project.org")
require(devtools)
install_version("rJava",  repos = "http://cran.us.r-project.org")
install_version("rJava", version = "0.5-0")
install_version("rJava", version = "0.5-0")
install_version("rJava", version = "0.5-0")
install_version("rJava", version = "0.5-0")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
